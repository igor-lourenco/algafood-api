# Esse é o arquivo padrão do Spring para customizar os erros. Esse arquivo tem precedência em
# relação ao arquivo ValidationMessages.properties que o Bean Validation usa para customizar os erros. Caso não esteja
# usando o contexto do Spring e quiser customizar os erros, tem que criar o arquivo ValidationMessages.properties para o
# Bean Validation usar como padrão.

# ===================================================================
# ===== VALIDANDO OS CAMPOS DA CLASSE RestauranteModel ==============
# ===================================================================

NotBlank.restauranteModel.nome=O campo ''nome'' do restaurante é obrigatório.
NotNull.restauranteModel.cozinha=O objeto ''cozinha'' do restaurante é obrigatório.
DecimalMin.restauranteModel.taxaFrete=O campo ''taxaFrete'' deve ser maior que ou igual a 1.

NotNull.restauranteModel.cozinha.id=O campo ''id'' do objeto ''cozinha'' do restaurante é obrigatório.

TaxaFreteValid.taxaFrete.invalida=Caiu na anotação personalizada.

# ===================================================================
# ===== VALIDANDO OS CAMPOS DA CLASSE CozinhaModel ==================
# ===================================================================

NotBlank.cozinhaModel.nome=O campo ''nome'' de cozinha é obrigatório


# ===================================================================
# ===== VALIDANDO OS CAMPOS COM A ANOTAÇÃO CUSTOMIZADA @ValorZeroIncluiDescricaoValid ==================
# ===================================================================

ValorZeroIncluiDescricaoValid.restauranteModel=O campo \''{1}\'' deve conter o valor \''{2}\''.

# ===================================================================
# ===== VALIDANDO OS CAMPOS DA CLASSE RestauranteInput ==============
# ===================================================================

NotBlank.restauranteInput.nome=O campo ''nome'' do restaurante é obrigatório.
NotNull.restauranteInput.cozinha=O objeto ''cozinha'' do restaurante é obrigatório.
NotNull.restauranteInput.taxaFrete=O campo ''taxaFrete'' do restaurante é obrigatório.
DecimalMin.restauranteInput.taxaFrete=O campo ''taxaFrete'' deve ser maior que ou igual a 1.

#NotNull.restauranteInput.cozinha.id=O campo ''id'' do objeto ''cozinha'' do restaurante é obrigatório.

NotNull.restauranteInput.cozinhaId=O campo ''cozinhaId'' do restaurante é obrigatório e não deve estar vazio.

NotBlank.restauranteInput.endereco.cep=O campo ''cep'' do objeto ''endereco'' do restaurante é obrigatório e não deve estar em branco.
NotBlank.restauranteInput.endereco.logradouro=O campo ''logradouro'' do objeto ''endereco'' do restaurante é obrigatório e não deve estar em branco.
NotBlank.restauranteInput.endereco.numero=O campo ''numero'' do objeto ''endereco'' do restaurante é obrigatório e não deve estar em branco.
NotBlank.restauranteInput.endereco.bairro=O campo ''bairro'' do objeto ''endereco'' do restaurante é obrigatório e não deve estar em branco.
NotBlank.restauranteInput.endereco.cidadeId=O campo ''cidadeId'' do objeto ''endereco'' do restaurante é obrigatório e não deve estar vazio.


# ===================================================================
# ===== VALIDANDO OS CAMPOS DA CLASSE FormaPagamentoInput ===========
# ===================================================================

NotBlank.formaPagamentoInput.descricao=O campo ''descricao'' da forma de pagamento é obrigatório e não deve estar em branco.

# ===================================================================
# ===== VALIDANDO OS CAMPOS DA CLASSE UsuarioComSenhaInput ==========
# ===================================================================

NotBlank.usuarioComSenhaInput.nome=O campo ''nome'' do usuario é obrigatório e não deve estar vazio.
NotBlank.usuarioComSenhaInput.email=O campo ''email'' do usuario é obrigatório e não deve estar vazio.
NotBlank.usuarioComSenhaInput.senha=O campo ''senha'' do usuario é obrigatório e não deve estar vazio.
Email.usuarioComSenhaInput.email=O campo ''email'' do usuario não é um e-mail. Corrija e tente novamente.


# ===================================================================
# ===== VALIDANDO OS CAMPOS DA CLASSE UsuarioInput ==================
# ===================================================================

NotBlank.usuarioInput.nome=O campo ''nome'' do usuario é obrigatório e não deve estar vazio.
NotBlank.usuarioInput.email=O campo ''email'' do usuario é obrigatório e não deve estar vazio.
Email.usuarioInput.email=O campo ''email'' do usuario não é um e-mail. Corrija e tente novamente.


# ===================================================================
# ===== VALIDANDO OS CAMPOS DA CLASSE UsuarioNovaSenhaInput =========
# ===================================================================

NotBlank.usuarioNovaSenhaInput.senhaAtual=O campo ''senhaAtual'' do usuario é obrigatório e não deve estar vazio.
NotBlank.usuarioNovaSenhaInput.novaSenha=O campo ''novaSenha'' do usuario é obrigatório e não deve estar vazio.


# ===================================================================
# ===== VALIDANDO OS CAMPOS DA CLASSE ProdutoInput ==================
# ===================================================================

NotBlank.produtoInput.nome=O campo ''nome'' do produto é obrigatório e não deve estar vazio.
NotBlank.produtoInput.descricao=O campo ''descricao'' do produto é obrigatório e não deve estar vazio.
NotBlank.produtoInput.preco=O campo ''preco'' do usuario é obrigatório.
PositiveOrZero.produtoInput.preco=O campo ''preco'' deve ser maior ou igual a zero.

# ===================================================================
# ===== VALIDANDO OS CAMPOS DA CLASSE PedidoInput ===================
# ===================================================================

NotNull.pedidoInput.restauranteId=O campo ''restauranteId'' do pedido é obrigatório e não deve estar vazio.
NotNull.pedidoInput.formaPagamentoId=O campo ''formaPagamentoId'' do pedido é obrigatório e não deve estar vazio.

NotNull.pedidoInput.enderecoEntrega=O objeto ''enderecoEntrega'' do pedido é obrigatório.
NotBlank.pedidoInput.enderecoEntrega.cep=O campo ''cep'' do objeto ''enderecoEntrega'' do pedido é obrigatório e não deve estar em branco.
NotBlank.pedidoInput.enderecoEntrega.logradouro=O campo ''logradouro'' do objeto ''enderecoEntrega'' do pedido é obrigatório e não deve estar em branco.
NotBlank.pedidoInput.enderecoEntrega.numero=O campo ''numero'' do objeto ''enderecoEntrega'' do pedido é obrigatório e não deve estar em branco.
NotBlank.pedidoInput.enderecoEntrega.bairro=O campo ''bairro'' do objeto ''enderecoEntrega'' do pedido é obrigatório e não deve estar em branco.
NotNull.pedidoInput.enderecoEntrega.cidadeId=O campo ''cidadeId'' do objeto ''enderecoEntrega'' do pedido é obrigatório e não deve estar vazio.

NotNull.pedidoInput.itens=A lista ''itens'' do pedido é obrigatório e não deve estar vazio.
Size.pedidoInput.itens=A lista ''itens'' do pedido deve conter pelo menos um item.
NotNull.pedidoInput.itens.produtoId=O campo ''produtoId'' da lista ''itens'' do pedido é obrigatório e não deve estar vazio.
NotNull.pedidoInput.itens.quantidade=O campo ''quantidade'' da lista ''itens'' do pedido é obrigatório e não deve estar vazio.
Positive.pedidoInput.itens.quantidade=O campo ''quantidade'' da lista ''itens'' deve ser maior ou igual a um.

# ===================================================================
# ===== VALIDANDO OS CAMPOS DA CLASSE PedidoFilter ===================
# ===================================================================
# Essa classe é um exemplo de como utilizar os campos da classe passando como parâmetro na API, está implementado em PedidoController na API: /pedidos/pesquisar

typeMismatch.pedidoFilter.dataCriacaoInicio=O parâmetro ''dataCriacaoInicio'' está inválido, forneça uma data padrão: yyyy-MM-ddTHH:mm:ssZ.
typeMismatch.pedidoFilter.dataCriacaoFim=O parâmetro ''dataCriacaoFim'' está inválido, forneça uma data padrão: yyyy-MM-ddTHH:mm:ssZ.
typeMismatch.pedidoFilter.clienteId=O parâmetro ''clienteId'' está inválido, forneça um valor válido do tipo: Long.
typeMismatch.pedidoFilter.restauranteId=O parâmetro ''restauranteId'' está inválido, forneça um valor válido do tipo: Long.


# ===================================================================
# ===== VALIDANDO OS CAMPOS DA CLASSE VendaDiariaFilter =============
# ===================================================================
# Essa classe é um exemplo de como utilizar os campos da classe passando como parâmetro na API, está implementado em EstatisticasController na API: /estatisticas

typeMismatch.vendaDiariaFilter.restauranteId=O parâmetro ''restauranteId'' está inválido, forneça um valor válido do tipo: Long.
typeMismatch.vendaDiariaFilter.dataCriacaoInicio=O parâmetro ''dataCriacaoInicio'' está inválido, forneça uma data padrão: dd/MM/yyyy.
typeMismatch.vendaDiariaFilter.dataCriacaoFim=O parâmetro ''dataCriacaoFim'' está inválido, forneça uma data padrão: dd/MM/yyyy.


# ===================================================================
# ===== VALIDANDO OS CAMPOS DA CLASSE FotoProdutoInput ==============
# ===================================================================

NotBlank.fotoProdutoInput.descricao=O campo ''descricao'' é obrigatório e não deve estar em branco.
NotNull.fotoProdutoInput.arquivo=O campo ''arquivo'' é obrigatório e não deve estar vazio.
FileSizeValid.fotoProdutoInput.arquivo=O campo ''arquivo'' excedeu o limite de {1} válido permitido.
FileContentTypeValid.fotoProdutoInput.arquivo=O campo ''arquivo'' deve ser do formato JPG ou PNG


# ===================================================================
# ===== VALIDANDO OS CAMPOS DA CLASSE CidadeInputV2 ==============
# ===================================================================

NotBlank.cidadeInputV2.nome=O campo ''nome'' é obrigatório e não deve estar em branco.
NotNull.cidadeInputV2.estadoId=O campo ''estadoId'' é obrigatório e não deve estar vazio.


# ===================================================================
# ===== VALIDANDO OS CAMPOS DA CLASSE CozinhaInputV2 ==============
# ===================================================================

NotBlank.cozinhaInputV2.cozinhaNome=O campo ''cozinhaNome'' é obrigatório e não deve estar em branco.


# ===================================================================
# ===== TELA DE APROVACAO DE SCOPES apprival.html ==============
# ===================================================================

scope.READ=Acesso de leitura
scope.WRITE=Acesso de escrita



# ===================================================================
# ===== Alguns exemplos de formatação ==============
# ===================================================================

#NotBlank={0} é obrigatório # Pega o nome do campo que está na classe
#NotBlank.nome=Informe um nome, porque é obrigatório # Tem precedência comparado com o de cima porque é mais específico

#nome=Nome # Troca o campo 'nome' que estiver nas classes por 'Nome'
#restauranteModel.nome=Nome do restaurante # Tem precedência comparado com o de cima porque é mais específico