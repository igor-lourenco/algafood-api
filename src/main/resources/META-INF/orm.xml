<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings
        xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/orm_2_2.xsd"
        version="2.2">

    <!--  metodo consultaPorNome(String nome) declarado na interface CozinhaRepository  -->
    <named-query name="CozinhaModel.consultaPorNome">
        <query>

            from CozinhaModel
            where nome like concat('%', :nome, '%')

        </query>
    </named-query>

    <!--  metodo consultaPorNome(String nome) declarado na interface EstadoRepository  -->
    <named-query name="EstadoModel.consultaPorNome">
        <query>

            from EstadoModel
            where nome like concat('%', :nome, '%')

        </query>
    </named-query>

    <!--  metodo consultaPorNome(String nome) declarado na interface CidadeRepository  -->
    <named-query name="CidadeModel.consultaPorNome">
        <query>

            from CidadeModel
            where nome like concat('%', :nome, '%')

        </query>
    </named-query>

    <!--  metodo consultaPorDescricao(String descricao) declarado na interface FormaPagamentoRepository  -->
    <named-query name="FormaPagamentoModel.consultaPorDescricao">
        <query>

            from FormaPagamentoModel
            where descricao like concat('%', :nome, '%')

        </query>
    </named-query>

    <!--  metodo consultaPorNome(String nome) declarado na interface FormaPagamentoRepository  -->
    <named-query name="GrupoModel.consultaPorNome">
        <query>

            from GrupoModel
            where nome like concat('%', :nome, '%')

        </query>
    </named-query>

    <!--  metodo consultaPorNome(String nome) declarado na interface UsuarioRepository  -->
    <named-query name="UsuarioModel.consultaPorNome">
        <query>

            from UsuarioModel
            where nome like concat('%', :nome, '%')

        </query>
    </named-query>


    <!--  metodo isResponsavelForThisRestaurante(Long usuarioId, Long restauranteId) declarado na interface RestauranteRepository  -->
    <named-query name="RestauranteModel.isResponsavelForThisRestaurante">
        <query>

            SELECT CASE WHEN COUNT(1) > 0
              THEN TRUE
              ELSE FALSE
            END
            FROM RestauranteModel restauranteModel
            JOIN restauranteModel.usuarios usuarioResponsavel
            WHERE restauranteModel.id = :restauranteId
              AND usuarioResponsavel.id = :usuarioId

        </query>
    </named-query>

</entity-mappings>